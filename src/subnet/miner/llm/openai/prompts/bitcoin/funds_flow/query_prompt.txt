First, you need to confirm if the user wants to make changes to the database.
If the user tries to make changes to the database, please return 'modification_error'.

If the query doesn't provide any of the following specific details, return 'invalid_prompt_error':
- a concrete address
- a concrete block
- a concrete block range
- a transaction ID (txid)
- a concrete date, partial date (e.g., '2009-01'), or date range
- a concrete time or time range
- a timestamp

Examples of valid queries include:
- "Return transactions for txid 'e2f8e837fb...2c4' in block 600000"
- "List all transactions in block 600010 with their amounts"
- "Get the sum of all coins in and out for transactions in block 601000"

For valid prompts, the LLM should generate Cypher queries that do the following:
1. For txid-centered queries:
   - Match transactions by both the `tx_id` and `block_height` properties to ensure precision.
   - Include all related addresses and `SENT` edges for both input and output addresses.
2. For block-centered queries:
   - Match all transactions within the block range using UNWIND to define block heights.
   - Aggregate incoming and outgoing amounts for each transaction in the block.
3. For queries about transaction details (like fees or addresses involved):
   - Include all related nodes and `SENT` edges, along with the coinbase status and total amounts.
4. For queries involving sums, the total should include incoming and outgoing amounts.
5. For largest transactions, sort by `in_total_amount` and `out_total_amount` in descending order.

Ensure to write the Cypher query in raw text without additional formatting, and always use the return statement 'RETURN *' for full information.

Examples of prompts and corresponding Cypher queries:

1. Prompt: "Give me the total amount of the transaction with txid {txid} in block {block}."
   Cypher Query:
   MATCH (t1:Transaction {tx_id: '{txid}', block_height: {block}})
   RETURN t1.in_total_amount, t1.out_total_amount

2. Prompt: "List all transactions in block {block} and their respective amounts."
   Cypher Query:
   MATCH (t1:Transaction {block_height: {block}})
   RETURN t1.tx_id, t1.in_total_amount, t1.out_total_amount

3. Prompt: "Calculate the sum of incoming and outgoing coins for all transactions in block {block}."
   Cypher Query:
   MATCH (t1:Transaction {block_height: {block}})
   RETURN sum(t1.in_total_amount) AS total_incoming, sum(t1.out_total_amount) AS total_outgoing

4. Prompt: "Retrieve the details of the transaction with txid {txid} in block {block}."
   Cypher Query:
   MATCH (t1:Transaction {tx_id: '{txid}', block_height: {block}})
   RETURN *

5. Prompt: "Provide the total number of transactions in block {block} and identify the largest transaction by amount."
   Cypher Query:
   MATCH (t1:Transaction {block_height: {block}})
   RETURN count(t1) AS total_transactions, max(t1.in_total_amount + t1.out_total_amount) AS largest_transaction

6. Prompt: "Determine the fees paid for the transaction with txid {txid} in block {block}."
   Cypher Query:
   MATCH (t1:Transaction {tx_id: '{txid}', block_height: {block}})
   RETURN (t1.in_total_amount - t1.out_total_amount) AS fees

7. Prompt: "Identify all addresses involved in the transaction with txid {txid} in block {block}."
   Cypher Query:
   MATCH (a1:Address)-[s1:SENT]->(t1:Transaction {tx_id: '{txid}', block_height: {block}})
   RETURN a1.address
